from models.pacienteModel import Paciente

class pacienteCRUD:
    def __init__(self, conexao):
        self.conn = conexao
        self.cursor = self.conn.cursor()

    def criarTabelaPaciente(self):
        self.cursor.execute("""
            SELECT table_name
            FROM user_tables
            WHERE table_name = 'paciente'
        """)
        tabela = self.cursor.fetchone()

        if tabela:
            print("Tabela 'paciente' j√° existe.")
        else:
            self.cursor.execute("""
                CREATE TABLE paciente (
                    id NUMBER (8) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR2(100) NOT NULL,
                    idade NUMBER (3) NOT NULL,
                    cpf VARCHAR2(20) NOT NULL,
                    email VARCHAR2(100) NOT NULL,
                    senha VARCHAR2(20) NOT NULL
                )
            """)
        self.conn.commit()

    def criarPaciente (self, paciente: Paciente):
        sql = "INSERT INTO paciente (nome, idade, cpf, email, senha) VALUES ( :1, :2, :3, :4, :5)"
        self.cursor.execute(sql, (paciente.nome, paciente.idade, paciente.CPF, paciente.email, paciente.senha))
        self.conn.commit()

    def listarPacientes(self):
        self.cursor.execute("SELECT id, nome, idade,  cpf, email, senha FROM paciente")
        rows = self.cursor.fetchall()
        return [Paciente(nome = row[1], idade=row[2], cpf=row[3], email=row[4], senha=row[5]) for row in rows]

    def atualizarPaciente(self, paciente_id, novoNome, novaIdade, novoEmail, novaSenha):
        sql = "UPDATE paciente SET nome = :1, idade = :2, email = :3, senha = :4 WHERE id = :5"
        self.cursor.execute(sql, (novoNome, novaIdade, novoEmail, novaSenha, paciente_id))
        self.conn.commit()

    def deletarPaciente(self, paciente_id):
        sql = "DELETE FROM paciente WHERE id = :1"
        self.cursor.execute(sql, (paciente_id,))
        self.conn.commit()