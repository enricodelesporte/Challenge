from models.suporteModel import SuporteModel

class suporteCRUD:
    def __init__(self, conexao):
        self.conn = conexao
        self.cursor = self.conn.cursor()

    def criarTabelaSuporte(self):
        self.cursor.execute("""
            SELECT table_name
            FROM user_tables
            WHERE table_name = 'SUPORTES'
        """)
        tabela = self.cursor.fetchone()

        if tabela:
            print("Tabela 'SUPORTES' j√° existe.")
        else:
            self.cursor.execute("""
                CREATE TABLE suportes (
                    id NUMBER (8) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR2(100) NOT NULL,
                    problema VARCHAR2(300) NOT NULL,
                    email VARCHAR2(80) NOT NULL,
                    nota NUMBER (1)
                 )
            """)
        self.conn.commit()

    def criarSuporte(self, suporte: SuporteModel):
        sql = "INSERT INTO suportes (nome, problema, email, nota) VALUES (:1, :2, :3, :4)"
        self.cursor.execute(sql, (suporte.nome, suporte.problema, suporte.email, suporte.nota))
        self.conn.commit()

    def listarSuportes(self):
        self.cursor.execute("SELECT id, nome, problema, email, nota FROM suportes")
        rows = self.cursor.fetchall()
        return [SuporteModel(nome=row[1], problema=row[2], email=row[3], nota=row[4]) for row in rows]

    def atualizarSuporte(self, suporte_id, novoProblema, novaNota):
        sql = "UPDATE suportes SET problema = :1, nota = :2 WHERE id = :3"
        self.cursor.execute(sql, (novoProblema, novaNota, suporte_id))
        self.conn.commit()

    def deletarSuporte(self, suporte_id):
        sql = "DELETE FROM suportes WHERE id = :1"
        self.cursor.execute(sql, (suporte_id,))
        self.conn.commit()